{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","emptyField","setEmptyField","onSubmit","e","preventDefault","catg","type","value","onChange","target","getGifs","category","a","uri","encodeURI","fetch","res","json","data","gif","map","img","id","title","url","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"mMAsCeA,EAnCK,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EAELC,mBAAS,IAFJ,mBAElCC,EAFkC,KAEtBC,EAFsB,OAGLF,oBAAS,GAHJ,mBAGlCG,EAHkC,KAGtBC,EAHsB,KAsBzC,OACE,uBAAMC,SAba,SAACC,GACpBA,EAAEC,iBACiB,KAAfN,GAIJF,GAAc,SAACS,GAAD,OAAWP,GAAX,mBAA0BO,OACxCJ,GAAc,GACdF,EAAc,KALZE,GAAc,IAUhB,UACE,uBAAOK,KAAK,OAAOC,MAAOT,EAAYU,SAlBtB,SAACL,GACnBJ,EAAcI,EAAEM,OAAOF,UAkBrB,wBAAQD,KAAK,SAAb,kCACCN,EAAa,sDAAqD,iC,+BC7B5DU,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACfC,EADe,0FAC0EC,UAC7FH,GAFmB,sBAIHI,MAAMF,GAJH,cAIfG,EAJe,gBAKEA,EAAIC,OALN,uBAKbC,EALa,EAKbA,KAEFC,EAAMD,EAAKE,KAAI,SAACC,GACpB,MAAO,CACLC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXC,IAAKH,EAAII,OAAOC,iBAAiBF,QAXhB,kBAcdL,GAdc,4CAAH,sDCWLQ,EATK,SAAC,GAAoB,IAAlBJ,EAAiB,EAAjBA,MAAOC,EAAU,EAAVA,IAC5B,OACE,sBAAKI,UAAU,+CAAf,UACE,kCAAKL,EAAL,OACA,qBAAKM,IAAKL,EAAKM,IAAKP,QCeXQ,EAjBC,SAAC,GAAkB,IAAhBpB,EAAe,EAAfA,SAAe,ECDN,SAACA,GAAc,IAAD,EACdd,mBAAS,CACjCqB,KAAM,GACNc,SAAS,IAH6B,mBACjCC,EADiC,KAC1BC,EAD0B,KAexC,OATAC,qBAAU,WACRzB,EAAQC,GAAUyB,MAAK,SAACC,GACtBH,EAAS,CACPhB,KAAMmB,EACNL,SAAS,SAGZ,CAACrB,IAEGsB,EDb2BK,CAAa3B,GAAjCc,EADkB,EACxBP,KAAcc,EADU,EACVA,QACtB,OACE,oCACE,qBAAIJ,UAAU,iBAAd,cAAiCjB,EAAjC,OACCqB,GACC,mBAAGJ,UAAU,mCAAb,wBAEF,qBAAKA,UAAU,OAAf,SACGH,EAAOL,KAAI,SAACC,GAAD,OACV,cAAC,EAAD,eAA8BA,GAAZA,EAAIC,aEOjBiB,EAjBM,WAAM,MAEW1C,mBAAS,IAFpB,mBAElB2C,EAFkB,KAEN5C,EAFM,KAKzB,OACE,gCACE,8CACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBACC4C,EAAWpB,KAAI,SAACT,GACf,OAAO,cAAC,EAAD,CAAwBA,SAAUA,GAApBA,U,YCT7B8B,IAASC,OAAO,cAAC,EAAD,IAAkBC,SAASC,eAAe,W","file":"static/js/main.1f3f5ed1.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst AddCategory = ({ setCategories }) => {\r\n  // ~ States\r\n  const [inputValue, setInputValue] = useState(\"\");\r\n  const [emptyField, setEmptyField] = useState(false);\r\n\r\n  // ~Manejadores de eventos\r\n  const handleInput = (e) => {\r\n    setInputValue(e.target.value);\r\n  };\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    if (inputValue === \"\") {\r\n      setEmptyField(true);\r\n      return;\r\n    }\r\n    setCategories((catg) => [inputValue, ...catg]);\r\n    setEmptyField(false);\r\n    setInputValue(\"\");\r\n  };\r\n\r\n  //\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <input type=\"text\" value={inputValue} onChange={handleInput} />\r\n      <button type=\"submit\">Agregar categor√≠a</button>\r\n      {emptyField ? <p>Escriba una categoria</p> : !emptyField ? <></> : <></>}\r\n    </form>\r\n  );\r\n};\r\n\r\nAddCategory.propTypes = {\r\n  setCategories: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default AddCategory;\r\n","export const getGifs = async (category) => {\r\n  const uri = `https://api.giphy.com/v1/gifs/search?api_key=B5zyTJdaiuswPWPRw2meSbYVwAa6DAHh&q=${encodeURI(\r\n    category\r\n  )}&limit=10`;\r\n  const res = await fetch(uri);\r\n  const { data } = await res.json();\r\n\r\n  const gif = data.map((img) => {\r\n    return {\r\n      id: img.id,\r\n      title: img.title,\r\n      url: img.images.downsized_medium.url,\r\n    };\r\n  });\r\n  return gif;\r\n};\r\n","import React from \"react\";\r\n\r\nconst GifGridItem = ({ title, url }) => {\r\n  return (\r\n    <div className=\"grid__card animate__animated animate__fadeIn\">\r\n      <p> {title} </p>\r\n      <img src={url} alt={title} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GifGridItem;\r\n","import React from \"react\";\r\nimport { useFetchGifs } from \"../hooks/useFetchGifs\";\r\nimport GifGridItem from \"./GifGridItem\";\r\n\r\nconst GifGrid = ({ category }) => {\r\n  const { data: images, loading } = useFetchGifs(category);\r\n  return (\r\n    <section>\r\n      <h3 className=\"titleCategory \"> {category} </h3>\r\n      {loading && (\r\n        <p className=\"animate__animated animate__flash\">Loading...</p>\r\n      )}\r\n      <div className=\"grid\">\r\n        {images.map((img) => (\r\n          <GifGridItem key={img.id} {...img} />\r\n        ))}\r\n      </div>\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default GifGrid;\r\n","import { useState, useEffect } from \"react\";\r\nimport { getGifs } from \"../helpers/getGifs\";\r\n\r\nexport const useFetchGifs = (category) => {\r\n  const [state, setState] = useState({\r\n    data: [],\r\n    loading: true,\r\n  });\r\n\r\n  useEffect(() => {\r\n    getGifs(category).then((imgs) => {\r\n      setState({\r\n        data: imgs,\r\n        loading: false,\r\n      });\r\n    });\r\n  }, [category]);\r\n\r\n  return state;\r\n};\r\n","import React, { useState } from \"react\";\r\nimport AddCategory from \"./components/AddCategory\";\r\nimport GifGrid from \"./components/GifGrid\";\r\n\r\nconst GifExpertApp = () => {\r\n  // ~ States\r\n  const [categories, setCategories] = useState([]);\r\n\r\n  // ~\r\n  return (\r\n    <div>\r\n      <h1>GifExpertApp</h1>\r\n      <AddCategory setCategories={setCategories} />\r\n      <hr />\r\n      {categories.map((category) => {\r\n        return <GifGrid key={category} category={category} />;\r\n      })}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GifExpertApp;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport GifExpertApp from \"./GifExpertApp\";\nimport \"./index.css\";\nimport \"normalize.css\";\n\nReactDOM.render(<GifExpertApp />, document.getElementById(\"root\"));\n"],"sourceRoot":""}